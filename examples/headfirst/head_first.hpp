// auto-generated by x2boost xpiler

#ifndef X2_EXAMPLES_HEADFIRST_HEAD_FIRST_HPP_
#define X2_EXAMPLES_HEADFIRST_HEAD_FIRST_HPP_

#include <x2boost/x2boost.hpp>

namespace x2 {
namespace examples {
namespace head_first {

    class capitalize_req;
    typedef boost::shared_ptr<capitalize_req> capitalize_req_ptr;

    class capitalize_req : public x2::event
    {
    public:
        const std::string& message() const
        {
            return message_;
        }
        void set_message(const std::string& value)
        {
            fingerprint_.touch(_tag()->offset() + 0);
            message_ = value;
        }

        virtual bool _equals(const x2::cell& other) const;
        virtual bool _equivalent(const x2::cell& other) const;
        virtual std::size_t _hash_code(const x2::fingerprint& fp) const;
        void _initialize();
        static capitalize_req_ptr _new()
        {
            return capitalize_req_ptr(new capitalize_req);
        }
        static const tag* _tag();
        virtual const x2::cell::tag* _type_tag() const;

    protected:
        capitalize_req(std::size_t length)
            : x2::event(length + _tag()->num_props())
        {
            _initialize();
        }
        void _describe(std::ostringstream& oss) const;

    private:
        capitalize_req()
            : x2::event(_tag()->num_props())
        {
            _initialize();
        }
        std::string message_;
    };

    class capitalize_resp;
    typedef boost::shared_ptr<capitalize_resp> capitalize_resp_ptr;

    class capitalize_resp : public x2::event
    {
    public:
        const std::string& result() const
        {
            return result_;
        }
        void set_result(const std::string& value)
        {
            fingerprint_.touch(_tag()->offset() + 0);
            result_ = value;
        }

        virtual bool _equals(const x2::cell& other) const;
        virtual bool _equivalent(const x2::cell& other) const;
        virtual std::size_t _hash_code(const x2::fingerprint& fp) const;
        void _initialize();
        static capitalize_resp_ptr _new()
        {
            return capitalize_resp_ptr(new capitalize_resp);
        }
        static const tag* _tag();
        virtual const x2::cell::tag* _type_tag() const;

    protected:
        capitalize_resp(std::size_t length)
            : x2::event(length + _tag()->num_props())
        {
            _initialize();
        }
        void _describe(std::ostringstream& oss) const;

    private:
        capitalize_resp()
            : x2::event(_tag()->num_props())
        {
            _initialize();
        }
        std::string result_;
    };

}  // namespace head_first
}  // namespace examples
}  // namespace x2

#endif  // X2_EXAMPLES_HEADFIRST_HEAD_FIRST_HPP_
