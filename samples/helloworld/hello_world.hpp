// auto-generated by x2boost xpiler

#ifndef X2BOOST_SAMPLES_HELLOWORLD_HELLO_WORLD_HPP_
#define X2BOOST_SAMPLES_HELLOWORLD_HELLO_WORLD_HPP_

#include <x2boost/x2boost.hpp>

namespace x2boost {
namespace samples {
namespace hello_world {

    class hello_req;
    typedef boost::intrusive_ptr<hello_req> hello_req_ptr;

    class hello_req : public x2boost::event
    {
    public:
        const std::string& name() const
        {
            return name_;
        }
        void name(const std::string& value)
        {
            fingerprint_.touch(_tag()->offset() + 0);
            name_ = value;
        }

        virtual bool _equals(const x2boost::cell& other) const;
        virtual bool _equivalent(const x2boost::cell& other) const;
        virtual std::size_t _hash_code(const x2boost::fingerprint& fp) const;
        void _initialize();
        static hello_req_ptr _new()
        {
            return hello_req_ptr(new hello_req);
        }
        static const tag* _tag();
        virtual const x2boost::cell::tag* _type_tag() const;

        virtual void _deserialize(x2boost::deserializer& deserializer);
        virtual int _get_encoded_length() const;
        virtual void _serialize(x2boost::serializer& serializer) const;

    protected:
        hello_req(std::size_t length)
            : x2boost::event(length + _tag()->num_props())
        {
            _initialize();
        }
        virtual void _describe(std::ostringstream& oss) const;

    private:
        hello_req()
            : x2boost::event(_tag()->num_props())
        {
            _initialize();
        }
        std::string name_;
    };

    class hello_resp;
    typedef boost::intrusive_ptr<hello_resp> hello_resp_ptr;

    class hello_resp : public x2boost::event
    {
    public:
        const std::string& message() const
        {
            return message_;
        }
        void message(const std::string& value)
        {
            fingerprint_.touch(_tag()->offset() + 0);
            message_ = value;
        }

        virtual bool _equals(const x2boost::cell& other) const;
        virtual bool _equivalent(const x2boost::cell& other) const;
        virtual std::size_t _hash_code(const x2boost::fingerprint& fp) const;
        void _initialize();
        static hello_resp_ptr _new()
        {
            return hello_resp_ptr(new hello_resp);
        }
        static const tag* _tag();
        virtual const x2boost::cell::tag* _type_tag() const;

        virtual void _deserialize(x2boost::deserializer& deserializer);
        virtual int _get_encoded_length() const;
        virtual void _serialize(x2boost::serializer& serializer) const;

    protected:
        hello_resp(std::size_t length)
            : x2boost::event(length + _tag()->num_props())
        {
            _initialize();
        }
        virtual void _describe(std::ostringstream& oss) const;

    private:
        hello_resp()
            : x2boost::event(_tag()->num_props())
        {
            _initialize();
        }
        std::string message_;
    };

}  // namespace hello_world
}  // namespace samples
}  // namespace x2boost

#endif  // X2BOOST_SAMPLES_HELLOWORLD_HELLO_WORLD_HPP_
