// Copyright (c) 2014 Jae-jun Kang
// See the file COPYING for license details.

#include "boost_formatter.hpp"

#include <fstream>

#include <boost/algorithm/string.hpp>
#include <boost/filesystem.hpp>

#include "document.hpp"

using namespace std;
using namespace x2boost;

namespace fs = boost::filesystem;

bool BoostFormatter::Format(Document* doc, const string& out_dir)
{
    try
    {
        fs::path basename = out_dir;
        basename /= doc->basename;

        BoostHeaderFormatter header_context;
        header_context.doc = doc;
        header_context.target = basename.string() + ".hpp";

        BoostSourceFormatter source_context;
        source_context.doc = doc;
        source_context.target = basename.string() + ".cpp";

        FormatHeaderFile(header_context);
        FormatSourceFile(source_context);

        return true;
    }
    catch (std::exception& e)
    {
        cout << e.what() << endl;
        return false;
    }
}

void BoostFormatter::FormatHeaderFile(FormatterContext& context)
{
    ofstream out(context.target);
    context.out = &out;

    string include_guard;
    if (!context.doc->ns.empty())
    {
        include_guard = context.doc->ns;
        boost::replace_all(include_guard, ".", "_");
        include_guard.append("_");
    }
    include_guard += /*MixedCase2UPPER_CASE*/(context.doc->basename);
    include_guard += "_HPP_";
    boost::to_upper(include_guard);

    out << "// auto-generated by x2boost xpiler" << endl;
    out << "#ifndef " << include_guard << endl;
    out << "#define " << include_guard << endl;

    out << "#endif  // " << include_guard << endl;
}

void BoostFormatter::FormatSourceFile(FormatterContext& context)
{
    ofstream out(context.target);
    context.out = &out;

    out << "#include \"" << context.doc->basename + ".hpp\"" << endl;

    out << "// end of " << fs::path(context.target).filename().string() << endl;
}

void BoostHeaderFormatter::FormatCell(Cell* def)
{

}

void BoostHeaderFormatter::FormatConsts(Consts* def)
{

}

void BoostHeaderFormatter::FormatReference(Reference* def)
{

}

void BoostSourceFormatter::FormatCell(Cell* def)
{

}

void BoostSourceFormatter::FormatConsts(Consts* def)
{

}

void BoostSourceFormatter::FormatReference(Reference* def)
{

}

// EOF boost_formatter.cpp
